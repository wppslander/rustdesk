name: Build Windows (RustDesk)

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  windows-release:
    name: Windows Release
    runs-on: windows-2022

    env:
      # Caminho padrão para o vcpkg no runner Windows
      VCPKG_ROOT: C:\vcpkg
      # Triplet estático (requerido pelas libs nativas do RustDesk)
      VCPKG_DEFAULT_TRIPLET: x64-windows-static
      # Garante uso do vcpkg em modo manifest (lendo vcpkg.json do repo)
      VCPKG_FEATURE_FLAGS: manifests
      # Aumenta a verbosidade do cargo para facilitar debug
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Instalar Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry + git
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache target (build artifacts)
        uses: actions/cache@v4
        with:
          path: |
            target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-target-

      - name: Cache vcpkg installed
        uses: actions/cache@v4
        with:
          path: |
            C:\vcpkg\installed
            C:\vcpkg\packages
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Instalar LLVM/Clang 20
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "20"

      - name: Exportar LIBCLANG_PATH (para o bindgen)
        shell: pwsh
        run: |
          # A action acima define $env:LLVM_PATH; apontamos o libclang para a pasta bin
          echo "LIBCLANG_PATH=$env:LLVM_PATH\bin" >> $env:GITHUB_ENV
          echo "CC=cl" >> $env:GITHUB_ENV
          echo "CXX=cl" >> $env:GITHUB_ENV

      - name: MSVC Dev Cmd (x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: vcpkg (clone + bootstrap se necessário)
        shell: pwsh
        run: |
          if (-not (Test-Path "${env:VCPKG_ROOT}\vcpkg.exe")) {
            git clone https://github.com/microsoft/vcpkg "${env:VCPKG_ROOT}"
            & "${env:VCPKG_ROOT}\bootstrap-vcpkg.bat"
          }
          & "${env:VCPKG_ROOT}\vcpkg.exe" version

      - name: Instalar dependências nativas via vcpkg (manifest)
        shell: pwsh
        env:
          VCPKG_FEATURE_FLAGS: manifests
        run: |
          # Lê o vcpkg.json do diretório atual e instala no triplet padrão
          & "${env:VCPKG_ROOT}\vcpkg.exe" install --triplet $env:VCPKG_DEFAULT_TRIPLET

      - name: Build release (verbose)
        shell: pwsh
        run: |
          rustc -V
          cargo -V
          cargo build --release -vv

      - name: Upload artifacts (.exe)
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-binaries
          path: |
            target\release\*.exe
          if-no-files-found: warn
