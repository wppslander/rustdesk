name: Build Windows (RustDesk)
on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

jobs:
  windows-release:
    name: Windows Release
    runs-on: windows-2022
    env:
      VCPKG_ROOT: C:\vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-windows-static
      VCPKG_FEATURE_FLAGS: manifests
      CARGO_TERM_COLOR: always
      
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          # CRÍTICO: Inicializa todos os submodules recursivamente
          submodules: recursive
          # Pega todo o histórico (pode ser necessário para alguns submodules)
          fetch-depth: 0

      - name: Verify submodules
        shell: pwsh
        run: |
          echo "=== Verificando estrutura de diretórios ==="
          Get-ChildItem -Path "." -Recurse -Directory | Where-Object { $_.Name -eq "libs" } | ForEach-Object { 
            echo "Encontrado diretório libs em: $($_.FullName)"
            Get-ChildItem -Path $_.FullName
          }
          
          echo "=== Verificando se hbb_common existe ==="
          if (Test-Path "libs\hbb_common\Cargo.toml") {
            echo "✓ hbb_common encontrado"
          } else {
            echo "✗ hbb_common NÃO encontrado"
            echo "Conteúdo do diretório libs:"
            if (Test-Path "libs") {
              Get-ChildItem -Path "libs"
            } else {
              echo "Diretório libs não existe!"
            }
          }

      - name: Instalar Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          # Adiciona targets necessários
          targets: x86_64-pc-windows-msvc

      - name: Cache Cargo registry + git
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache target (build artifacts)
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
          restore-keys: |
            ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-target-

      - name: Cache vcpkg installed
        uses: actions/cache@v4
        with:
          path: |
            C:\vcpkg\installed
            C:\vcpkg\packages
            C:\vcpkg\downloads
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Instalar LLVM/Clang 15.0.2 (recomendado RustDesk)
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "15.0.2"  # Versão oficial recomendada pelo RustDesk
          directory: ${{ runner.temp }}/llvm

      - name: Configurar variáveis de ambiente
        shell: pwsh
        run: |
          echo "LIBCLANG_PATH=${{ runner.temp }}\llvm\bin" >> $env:GITHUB_ENV
          echo "LLVM_CONFIG_PATH=${{ runner.temp }}\llvm\bin\llvm-config.exe" >> $env:GITHUB_ENV
          echo "CC=clang-cl" >> $env:GITHUB_ENV
          echo "CXX=clang-cl" >> $env:GITHUB_ENV

      - name: MSVC Dev Cmd (x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Configurar vcpkg
        shell: pwsh
        run: |
          if (-not (Test-Path "${env:VCPKG_ROOT}")) {
            git clone --depth 1 https://github.com/Microsoft/vcpkg.git "${env:VCPKG_ROOT}"
          }
          
          if (-not (Test-Path "${env:VCPKG_ROOT}\vcpkg.exe")) {
            & "${env:VCPKG_ROOT}\bootstrap-vcpkg.bat"
          }
          
          # Integrar vcpkg globalmente
          & "${env:VCPKG_ROOT}\vcpkg.exe" integrate install
          
          echo "VCPKG_ROOT=${env:VCPKG_ROOT}" >> $env:GITHUB_ENV
          echo "${env:VCPKG_ROOT}" >> $env:GITHUB_PATH

      - name: Instalar dependências vcpkg
        shell: pwsh
        run: |
          # Verificar se vcpkg.json existe
          if (Test-Path "vcpkg.json") {
            echo "Usando vcpkg.json para instalar dependências..."
            & "${env:VCPKG_ROOT}\vcpkg.exe" install --triplet $env:VCPKG_DEFAULT_TRIPLET
          } else {
            echo "vcpkg.json não encontrado, instalando dependências manualmente..."
            # Lista de dependências típicas do RustDesk
            $packages = @(
              "opus",
              "aom",
              "libyuv", 
              "opus",
              "vpx"
            )
            
            foreach ($pkg in $packages) {
              echo "Instalando $pkg..."
              & "${env:VCPKG_ROOT}\vcpkg.exe" install "${pkg}:$env:VCPKG_DEFAULT_TRIPLET"
            }
          }

      - name: Verificar Cargo.toml principal
        shell: pwsh
        run: |
          if (Test-Path "Cargo.toml") {
            echo "=== Conteúdo do Cargo.toml principal ==="
            Get-Content "Cargo.toml" | Select-Object -First 20
          } else {
            echo "ERRO: Cargo.toml não encontrado no diretório raiz!"
            exit 1
          }

      - name: Cargo check (verificação rápida)
        shell: pwsh
        run: |
          echo "=== Executando cargo check para verificar dependências ==="
          cargo check --verbose

      - name: Build release
        shell: pwsh
        run: |
          echo "=== Informações do sistema ==="
          rustc -V
          cargo -V
          
          echo "=== Iniciando build release ==="
          cargo build --release --verbose
          
          echo "=== Verificando binários gerados ==="
          if (Test-Path "target\release") {
            Get-ChildItem -Path "target\release" -Filter "*.exe" | ForEach-Object {
              echo "Binário encontrado: $($_.Name) - Tamanho: $([math]::Round($_.Length / 1MB, 2)) MB"
            }
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-binaries-${{ github.run_number }}
          path: |
            target\release\*.exe
            target\release\*.pdb
          if-no-files-found: error
          retention-days: 30
